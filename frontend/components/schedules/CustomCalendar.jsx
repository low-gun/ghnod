import React, {
  useMemo,
  useState,
  useRef,
  useEffect,
  useCallback,
} from "react";
import moment from "moment";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import interactionPlugin from "@fullcalendar/interaction";
import ScheduleDetailModal from "./ScheduleDetailModal";
import api from "@/lib/api";
import { useGlobalAlert } from "@/stores/globalAlert";
import { useGlobalConfirm } from "@/stores/globalConfirm";

function CustomCalendar({
  schedules = [],
  shouldFilterInactive = true,
  onSelectSchedule,
  onDatesSet,
  mode = "user",
}) {
  console.log("render <CustomCalendar>", schedules?.length ?? 0);

  const [selectedSchedule, setSelectedSchedule] = useState(null);
const showAlert = useGlobalAlert((s) => s.showAlert);
const showConfirm = useGlobalConfirm((s) => s.showConfirm);
const calendarRef = useRef(null);
const lastRangeRef = useRef({ start: "", end: "" }); // ‚òÖ Ï∂îÍ∞Ä: Í∞ôÏùÄ Î≤îÏúÑ Ïû¨ÏöîÏ≤≠ Î∞©ÏßÄ
const [isMobile, setIsMobile] = useState(false);

// ‚úÖ ÌöåÏ∞® Îã®ÏúÑ Ïù¥Î≤§Ìä∏Î•º Îã¥ÏùÑ ÏÉÅÌÉú
const [sessionEvents, setSessionEvents] = useState([]);

// ‚úÖ ÌöåÏ∞® Î™©Î°ù Î°úÎçî
const fetchSessionEvents = useCallback(async (startYmd, endYmd) => {
  try {
    const { data } = await api.get("/education/schedules/public/sessions", {
      params: { start_date: startYmd, end_date: endYmd, limit: 1000 },
    });

    const list = Array.isArray(data?.sessions) ? data.sessions : [];
    console.table(
      list.slice(0, 8).map(ss => ({
        session_id: ss.session_id,
        schedule_id: ss.schedule_id,
        title: ss.title,
        start_date: ss.start_date,
        end_date: ss.end_date,
        start_time: ss.start_time,
        end_time: ss.end_time,
        type: ss.type,
      }))
    );
    console.log("üîé [sessions sample]",
      list.slice(0, 8).map(ss => ({
        session_id: ss.session_id,
        schedule_id: ss.schedule_id,
        title: ss.title,
        start_date: ss.start_date,
        end_date: ss.end_date,
        start_time: ss.start_time,
        end_time: ss.end_time,
        type: ss.type,
      }))
    ); // ‚òÖ Ï∂îÍ∞Ä

    setSessionEvents(list);
  } catch (e) {
    console.error("‚ùå Í≥µÍ∞ú ÌöåÏ∞® Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:", e);
    showAlert("ÏùºÏ†ï Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®");
  }
}, [showAlert]);


  useEffect(() => {
    if (typeof window === "undefined") return; // SSR Í∞ÄÎìú

    const mq = window.matchMedia("(max-width: 640px)");
    const apply = () => setIsMobile(mq.matches);

    apply();

    // Î∏åÎùºÏö∞Ï†Ä Ìò∏Ìôò Ï≤òÎ¶¨
    if (mq.addEventListener) {
      mq.addEventListener("change", apply);
      return () => mq.removeEventListener("change", apply);
    } else {
      mq.addListener(apply);
      return () => mq.removeListener(apply);
    }
  }, []);

  const handleEdit = (item) => {
    const targetId = item.schedule_id || item.id; // ‚úÖ ÏùºÏ†ï id Ïö∞ÏÑ†
    window.location.href = `/admin/schedules/${targetId}`;
  };
  const handleDelete = async (item) => {
    const targetId = item.schedule_id || item.id; // ‚úÖ
    const ok = await showConfirm("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
    if (!ok) return;
    try {
      await api.request({
        method: "delete",
        url: "admin/schedules",
        headers: { "Content-Type": "application/json" },
        data: { ids: [targetId] },
      });      showAlert("ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
      setSelectedSchedule(null);
      window.location.reload();
    } catch (err) {
      console.error("ÏÇ≠Ï†ú Ïã§Ìå®:", err);
      showAlert("ÏÇ≠Ï†ú Ïã§Ìå®");
    }
  };
  
  // ‚úÖ ÏÑ∏ÏÖò(ÌöåÏ∞®) ‚Üí FC Ïù¥Î≤§Ìä∏
  const stableEvents = useMemo(() => {
    return sessionEvents.map((ss) => {
      let start, end, allDay = false;
  
      if (ss.start_time === "00:00:00" && ss.end_time === "00:00:00") {
        // ‚ñ∂ Ï¢ÖÏùº ÏùºÏ†ï
        allDay = true;
        start = moment(`${ss.start_date} 00:00:00`).toISOString();
        end   = moment(`${ss.end_date} 00:00:00`).add(1, "day").toISOString();
      } else {
        // ‚ñ∂ ÏãúÍ∞Ñ ÏûàÎäî ÏùºÏ†ï
        const st = ss.start_time ?? "00:00:00";
        const et = ss.end_time   ?? "00:00:00";
        start = moment(`${ss.start_date} ${st}`).toISOString();
        end   = moment(`${ss.end_date} ${et}`).toISOString();
      }
  
      return {
        id: ss.session_id,
        title: ss.title,
        start,
        end,
        allDay,
        extendedProps: {
          schedule_id: ss.schedule_id,
          type: ss.type ?? null,
          productTitle: ss.product_title ?? null,
          start_time: ss.start_time,
          end_time: ss.end_time,
          image_url: ss.image_url,
        },
      };
    });
  }, [sessionEvents]);
  
  
  
  
const stableOnDatesSet = useCallback(
  (info) => {
    // info.start ~ info.endÏùÄ 6Ï£º Í≤©Ïûê Î≤îÏúÑÏù¥ÎØÄÎ°ú,
    // Ï§ëÍ∞Ñ ÏßÄÏ†êÏùÑ Í∏∞Ï§ÄÏúºÎ°ú 'Î≥¥Ïù¥Îäî Îã¨'ÏùÑ Í≥ÑÏÇ∞
    const mid = moment(info.start).add(2, "weeks");
    const monthStart = mid.clone().startOf("month");
    const monthEndEx = mid.clone().endOf("month").add(1, "day"); // end exclusive

    const startYmd = monthStart.format("YYYY-MM-DD");
    const endYmd   = monthEndEx.format("YYYY-MM-DD");

    // Í∞ôÏùÄ Î≤îÏúÑ Ïû¨ÏöîÏ≤≠ Î∞©ÏßÄ
    if (lastRangeRef.current.start === startYmd && lastRangeRef.current.end === endYmd) {
      return;
    }
    lastRangeRef.current = { start: startYmd, end: endYmd };

    console.log("üîé [FC safe month range]", { startYmd, endYmd });

    // ‚òÖ Îã® Ìïú Î≤àÎßå Ìò∏Ï∂ú
    fetchSessionEvents(startYmd, endYmd);

    if (onDatesSet) onDatesSet(info);
  },
  [onDatesSet, fetchSessionEvents]
);



  const colorList = useMemo(
    () => [
      "#F28B82", // Î∂ÄÎìúÎü¨Ïö¥ Î†àÎìú
      "#F6AD55", // Îî∞ÎúªÌïú Ïò§Î†åÏßÄ
      "#F6E58D", // ÌååÏä§ÌÖî ÏòêÎ°úÏö∞
      "#A3D9A5", // ÌÜ§Îã§Ïö¥ ÎØºÌä∏/Í∑∏Î¶∞
      "#7EB6F3", // ÌååÏä§ÌÖî Î∏îÎ£®
      "#A29BFE", // Ïó∞Î≥¥Îùº (ÌçºÌîå)
      "#D7A9E3", // ÎùºÏùºÎùΩ ÌïëÌÅ¨ ÌçºÌîå
    ],
    []
  );

  // ‚úÖ Í∞ôÏùÄ ÏùºÏ†ï(schedules)ÏùÑ Í∞ôÏùÄ ÏÉâÏúºÎ°ú Î≥¥Ïù¥Í≤å: schedule_id Í∏∞Ï§Ä
const getColor = useCallback(
  (scheduleId) => {
    const key = String(scheduleId ?? "");
    const idx = key ? Array.from(key).reduce((a, b) => a + b.charCodeAt(0), 0) % colorList.length : 0;
    return colorList[idx];
  },
  [colorList]
);
const renderEventContent = useCallback(
  (arg) => {
    const isPopover = arg.el?.closest?.(".fc-popover");
    const title = arg.event.title;
    const sid = arg.event.extendedProps?.schedule_id;
    const bgColor = getColor(sid);
    return isPopover ? (
      <div className="gh-popover-item">
        <span className="gh-popover-title">{title}</span>
      </div>
    ) : (
      <div
        className="gh-event-chip"
        style={{ backgroundColor: bgColor }}
        title={title}
      >
        {title}
      </div>
    );
  },
  [getColor]
);

const handleEventClick = useCallback(
  (info) => {
    const eventData = {
      // ÏÑ∏ÏÖò ÌÅ¥Î¶≠ Ïãú: idÎäî session_id, schedule_idÎäî extendedProps
      id: info.event.id, // session_id
      title: info.event.title,
      start: info.event.start,
      end: info.event.end,
      ...info.event.extendedProps, // schedule_id, type Îì±
    };
    if (onSelectSchedule) {
      onSelectSchedule(eventData);
    } else {
      setSelectedSchedule(eventData);
    }
  },
  [onSelectSchedule]
);

  return (
    <div className="custom-calendar-wrapper">
      <FullCalendar
        ref={calendarRef}
        plugins={[dayGridPlugin, interactionPlugin]}
        initialView="dayGridMonth"
        locale="ko"
        height="auto"
        datesSet={stableOnDatesSet}
        events={stableEvents}        // ‚úÖ ÌöåÏ∞® Îã®ÏúÑ Ïù¥Î≤§Ìä∏ ÏÇ¨Ïö©
        /* Î™®Î∞îÏùº: Îçî Ï¥òÏ¥òÌïòÍ≤å(2Í∞úÎßå bar) / Îç∞Ïä§ÌÅ¨ÌÉë: 3Í∞ú */
        dayMaxEvents={isMobile ? 2 : 3}
        /* ÏöîÏùº Ìó§ÎçîÎ•º Îçî ÏßßÍ≤å */
        dayHeaderFormat={
          isMobile ? { weekday: "narrow" } : { weekday: "short" }
        }
        /* +n ÎùºÎ≤®: Î™®Î∞îÏùºÏùÄ Í∞ÑÍ≤∞ÌïòÍ≤å */
        moreLinkClick="popover"
        moreLinkContent={(args) => (
          <span
            className="fc-more-link-custom"
            title={`${args.num}Í∞úÏùò Ï∂îÍ∞Ä ÏùºÏ†ï Î≥¥Í∏∞`}
          >
            +{args.num}
          </span>
        )}
        eventClick={handleEventClick}
        headerToolbar={{
          left: "prev",
          center: "title",
          right: "next",
        }}
        eventContent={renderEventContent}
      />

      {selectedSchedule && (
        <ScheduleDetailModal
          schedule={selectedSchedule}
          onClose={() => setSelectedSchedule(null)}
          onEdit={() => handleEdit(selectedSchedule)}
          onDelete={() => handleDelete(selectedSchedule)}
          mode={mode}
        />
      )}
    </div>
  );
}
export default React.memo(CustomCalendar);
